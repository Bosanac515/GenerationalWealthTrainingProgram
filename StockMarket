import tkinter as tk
from tkinter import messagebox, ttk
import os
import yfinance as yf
import random
import json

# Constants
STOCK_SYMBOLS = ['AAPL', 'GOOGL', 'MSFT', 'AMZN', 'TSLA']
SAVE_FILE = 'game_state.json'
DATA_DIR = 'data'
os.makedirs(DATA_DIR, exist_ok=True)

class StockGame:
    def __init__(self, root):
        self.root = root
        self.symbol, self.balance, self.portfolio, self.transaction_history = None, None, None, None
        self.select_stock_symbol()
        self.load_game_state()
        self.create_widgets()

    def select_stock_symbol(self):
        self.symbol = tk.StringVar(self.root)
        self.symbol.set(STOCK_SYMBOLS[0])  # default value
        tk.OptionMenu(self.root, self.symbol, *STOCK_SYMBOLS).pack()

    def load_game_state(self):
        if os.path.exists(SAVE_FILE):
            with open(SAVE_FILE, 'r') as file:
                data = json.load(file)
                self.balance, self.portfolio, self.transaction_history = data['balance'], data['portfolio'], data['transaction_history']
        else:
            self.balance = 10000
            self.portfolio = {self.symbol.get(): {"quantity": 5, "average_price": 150.0}}
            self.transaction_history = []

    def get_realtime_stock_price(self):
        try:
            data = yf.Ticker(self.symbol.get()).history(period='1d')
            return data['Close'].iloc[-1]
        except Exception as e:
            messagebox.showerror("Error", f"Failed to fetch real-time stock data for {self.symbol.get()}: {e}")
            return None

    def simulate_market_movement(self, price):
        return price * (1 + random.uniform(-1, 1))

    def simulate_stock_game(self, action, quantity):
        stock_price = self.get_realtime_stock_price()
        if stock_price:
            getattr(self, f"{action}_stock")(stock_price, quantity)

    def buy_stock(self, stock_price, quantity):
        cost = stock_price * quantity
        if cost <= self.balance:
            self.balance -= cost
            self.update_portfolio(stock_price, quantity, "buy")

    def sell_stock(self, stock_price, quantity):
        if self.symbol.get() in self.portfolio and self.portfolio[self.symbol.get()]["quantity"] >= quantity:
            self.balance += stock_price * quantity
            self.update_portfolio(stock_price, quantity, "sell")

    def update_portfolio(self, stock_price, quantity, action):
        stock_data = self.portfolio.setdefault(self.symbol.get(), {"quantity": 0, "average_price": 0})
        if action == "buy":
            stock_data["quantity"] += quantity
            stock_data["average_price"] = ((stock_data["average_price"] * (stock_data["quantity"] - quantity)) +
                                           (stock_price * quantity)) / stock_data["quantity"]
        elif action == "sell":
            stock_data["quantity"] -= quantity
        self.transaction_history.append({"action": action, "quantity": quantity, "price": stock_price})
        self.display_portfolio()

    def display_portfolio(self):
        for i in self.tree.get_children():
            self.tree.delete(i)
        for stock, data in self.portfolio.items():
            stock_price = self.get_realtime_stock_price()
            total_value = data["quantity"] * stock_price
            self.tree.insert('', 'end', values=(stock, data['quantity'], f"${stock_price:.2f}", f"${total_value:.2f}"))
        self.balance_label.config(text=f"Total Balance: ${self.balance:.2f}")

    def create_widgets(self):
        self.balance_label = tk.Label(self.root, text=f"Total Balance: ${self.balance:.2f}")
        self.balance_label.pack()

        self.tree = ttk.Treeview(self.root)
        self.tree["columns"]=("one","two","three","four")
        self.tree.column("#0", width=0, stretch=tk.NO)
        self.tree.column("one", width=100)
        self.tree.column("two", width=100)
        self.tree.column("three", width=100)
        self.tree.column("four", width=100)

        self.tree.heading("one", text="Stock")
        self.tree.heading("two", text="Quantity")
        self.tree.heading("three", text="Current Price")
        self.tree.heading("four", text="Total Value")

        self.tree.pack()

        self.buy_button = tk.Button(self.root, text="Buy", command=lambda: self.simulate_stock_game("buy", 1))
        self.buy_button.pack()

        self.sell_button = tk.Button(self.root, text="Sell", command=lambda: self.simulate_stock_game("sell", 1))
        self.sell_button.pack()

root = tk.Tk()
app = StockGame(root)
root.mainloop()
